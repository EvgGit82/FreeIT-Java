package library;

/*
Библиотека

Создать класс Книга, поля:
• id (целое число)
• title (строка)
• genre (строка) (Если вы уже в себе уверены, создавайте еще один класс Genre и в класс Book вмест genre включайте
genreId, который будет ссылаться на жанр с соответствующим id)

Создать класс Библиотека, поля:
• Список книг (изначально пустой) методы:
• добавить книгу (принимает объект книги и добавляет его в список товаров). При попытке добавить кигу с id уже
существующем в списке, вставка производится не должна
• получить все книги (метод ВОЗВРАЩАЕТ список всех книг в библиотеке)
• удалить книгу (метод принимает id книги и удаляет из списка книгу с соответствующим id)
• редактировать книгу (принимает объект книги и редактирует их список товаров) Обратите внимание что id книги
и индекс книги в списке — это разные вещи, не перепутайте. Id книги — это поле вашего объекта, вы при его создании
его задаете. А индекс книги в списке книг, это по сути её порядковый номер в списке(начинается с 0).

 Алгоритм работы библиотеки:
• Выберите действие:

◦ Вывод всех книг. При выборе этого действия, было бы отлично спросить у пользователя в какой сортировке вывести:
▪ по алфавиту (возрастание)
▪ по алфавиту (убывание)
▪ по добавлению(сначала новые, потом более старые)
После выбора сортировки, из библиотки получаете список книг, сортируете их таким образом как выбрал пользователь
и выводите в консоль.

◦ Добавление книги. При выборе этого действия:
▪ пользователь должен ввести из консоли 3 параметра (id, название, жанр).
▪ создаем объект книги (поля заполняются данными введенными пользователем)
▪ добавляем книгу в библиотеку (напоминаю, если в списке книг уже существует книга с таким id, то новая книга
не добавляется)

◦ Удаление книги. При выборе этого действия: (Select 0 to cancel)
▪ пользователь вводит id книги которую нужно удалить
▪ удаляем книгу из магазина

◦ Редактирование книги. При выборе этого действия:
▪ пользователь должен ввести из консоли 3 параметра (id книги для редактирования, новое название, новую жанр).
▪ создаем объект книги (поля заполняются данными введенными пользователем)
▪ редактируем книгу в библиотеке

◦ Выход. При выборе этого действия, работа библиотеки завершается.

В main создаем объект вашей консольной менюшки(приложения, Application). И вызываем метод старт. Библиотека должна
работать по замкнутому циклы, до тех пор пока пользователь в меню не выберет выход. Естественно не забываем
про обработку всевозможных ошибок.

LATER TASK UPDATE:

Id вообще вы сами не передаете ни при создании, ни при редактировании.

*/

public class Runner {

    public static void main(String[] args) throws InterruptedException {

        new Application().start();

    }
}
